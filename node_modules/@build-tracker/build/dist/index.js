"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Build = /** @class */ (function () {
    function Build(meta, artifacts) {
        var _this = this;
        this._meta = Object.freeze(meta);
        this._artifacts = new Map();
        artifacts.forEach(function (artifact) {
            _this._artifacts.set(artifact.name, artifact);
        });
    }
    Build.fromJSON = function (build) {
        return new Build(build.meta, build.artifacts);
    };
    Build.prototype.toJSON = function () {
        return { meta: this.meta, artifacts: Array.from(this._artifacts.values()) };
    };
    Object.defineProperty(Build.prototype, "meta", {
        get: function () {
            return this._meta;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Build.prototype, "timestamp", {
        get: function () {
            return new Date(parseInt(this._meta.timestamp + "000", 10));
        },
        enumerable: true,
        configurable: true
    });
    Build.prototype.getMetaValue = function (key) {
        var val = this._meta[key];
        // @ts-ignore
        return typeof val === 'object' && val.hasOwnProperty('value') ? val.value : val;
    };
    Build.prototype.getMetaUrl = function (key) {
        var val = this._meta[key];
        // @ts-ignore
        return typeof val === 'object' && val.hasOwnProperty('url') ? val.url : undefined;
    };
    Object.defineProperty(Build.prototype, "artifacts", {
        get: function () {
            return Array.from(this._artifacts.values());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Build.prototype, "artifactSizes", {
        get: function () {
            var _this = this;
            if (!this._sizeKeys) {
                this._sizeKeys = new Set();
                this._artifacts.forEach(function (artifact) {
                    Object.keys(artifact.sizes).forEach(function (k) {
                        _this._sizeKeys.add(k);
                    });
                });
            }
            return Array.from(this._sizeKeys);
        },
        enumerable: true,
        configurable: true
    });
    Build.prototype.getArtifact = function (name) {
        return this._artifacts.get(name);
    };
    Object.defineProperty(Build.prototype, "artifactNames", {
        get: function () {
            return Array.from(this._artifacts.keys());
        },
        enumerable: true,
        configurable: true
    });
    Build.prototype.getSum = function (artifactNames) {
        var _this = this;
        return artifactNames.reduce(function (sum, artifactName) {
            var artifact = _this._artifacts.get(artifactName);
            if (artifact) {
                Object.entries(artifact.sizes).forEach(function (_a) {
                    var key = _a[0], value = _a[1];
                    if (!sum[key]) {
                        sum[key] = 0;
                    }
                    sum[key] += value;
                });
            }
            return sum;
        }, {});
    };
    Build.prototype.getTotals = function (artifactFilters) {
        var _this = this;
        if (!this._totals) {
            this._totals = {};
            this._artifacts.forEach(function (artifact) {
                Object.entries(artifact.sizes).forEach(function (_a) {
                    var key = _a[0], value = _a[1];
                    if (!_this._totals[key]) {
                        _this._totals[key] = 0;
                    }
                    _this._totals[key] += value;
                });
            });
        }
        if (artifactFilters && artifactFilters.length) {
            var totals_1 = __assign({}, this._totals);
            Array.from(this._artifacts.keys()).forEach(function (artifactName) {
                if (artifactFilters.some(function (filter) { return filter.test(artifactName); })) {
                    Object.entries(_this._totals).forEach(function (_a) {
                        var key = _a[0], value = _a[1];
                        var size = _this._artifacts.get(artifactName).sizes[key];
                        totals_1[key] = value - size;
                    });
                }
            });
            return totals_1;
        }
        return this._totals;
    };
    return Build;
}());
exports.default = Build;
//# sourceMappingURL=index.js.map