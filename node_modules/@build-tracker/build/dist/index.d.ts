/**
 * Copyright (c) 2019 Paul Armstrong
 */
import { ArtifactFilters } from '@build-tracker/types';
export declare type BuildMetaItem = string | {
    value: string;
    url: string;
};
declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export interface BuildMeta {
    revision: BuildMetaItem;
    parentRevision: BuildMetaItem;
    timestamp: number;
    branch: BuildMetaItem;
}
export interface Artifact {
    hash: string;
    name: string;
    sizes: ArtifactSizes;
}
export interface ArtifactSizes {
    [key: string]: number;
}
export default class Build<M extends BuildMeta = BuildMeta> {
    private _meta;
    private _artifacts;
    private _totals;
    private _sizeKeys;
    constructor(meta: M, artifacts: Array<Artifact>);
    static fromJSON<M extends BuildMeta = BuildMeta>(build: {
        meta: M;
        artifacts: Array<Artifact>;
    }): Build<M>;
    toJSON(): {
        meta: M;
        artifacts: Array<Artifact>;
    };
    get meta(): M;
    get timestamp(): Date;
    getMetaValue(key: keyof Omit<M, 'timestamp'>): string;
    getMetaUrl(key: keyof Omit<M, 'timestamp'>): string | undefined;
    get artifacts(): Array<Artifact>;
    get artifactSizes(): Array<string>;
    getArtifact(name: string): Artifact;
    get artifactNames(): Array<string>;
    getSum(artifactNames: Array<string>): ArtifactSizes;
    getTotals(artifactFilters?: ArtifactFilters): ArtifactSizes;
}
export {};
//# sourceMappingURL=index.d.ts.map