"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) 2019 Paul Armstrong
 */
var Git = __importStar(require("./git"));
var path_to_regexp_1 = __importDefault(require("path-to-regexp"));
var stat_artifacts_1 = __importDefault(require("./stat-artifacts"));
function createBuild(config, opts) {
    if (opts === void 0) { opts = { skipDirtyCheck: false }; }
    return __awaiter(this, void 0, void 0, function () {
        var isDirty, artifactStats, artifacts, defaultBranch, branch, _a, revision, parentRevision, _b, _c, _d, timestamp, name, subject, toPath, revisionUrl, parentRevisionUrl, build;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    if (!!opts.skipDirtyCheck) return [3 /*break*/, 2];
                    return [4 /*yield*/, Git.isDirty(config.cwd)];
                case 1:
                    isDirty = _e.sent();
                    if (isDirty) {
                        throw new Error('Current work tree is dirty. Please commit all changes before proceeding');
                    }
                    _e.label = 2;
                case 2:
                    artifactStats = stat_artifacts_1.default(config);
                    artifacts = Array.from(artifactStats).reduce(function (memo, _a) {
                        var artifactName = _a[0], stat = _a[1];
                        memo.push({
                            name: artifactName,
                            hash: stat.hash,
                            sizes: {
                                stat: stat.stat,
                                gzip: stat.gzip,
                                brotli: stat.brotli
                            }
                        });
                        return memo;
                    }, []);
                    return [4 /*yield*/, Git.getDefaultBranch(config.cwd)];
                case 3:
                    defaultBranch = _e.sent();
                    if (!opts.branch) return [3 /*break*/, 4];
                    _a = opts.branch;
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, Git.getBranch(config.cwd)];
                case 5:
                    _a = _e.sent();
                    _e.label = 6;
                case 6:
                    branch = _a;
                    return [4 /*yield*/, Git.getCurrentRevision(config.cwd)];
                case 7:
                    revision = _e.sent();
                    _b = opts.parentRevision;
                    if (_b) return [3 /*break*/, 12];
                    if (!(branch !== defaultBranch)) return [3 /*break*/, 9];
                    return [4 /*yield*/, Git.getMergeBase(defaultBranch, config.cwd)];
                case 8:
                    _c = _e.sent();
                    return [3 /*break*/, 11];
                case 9: return [4 /*yield*/, Git.getParentRevision(revision)];
                case 10:
                    _c = _e.sent();
                    _e.label = 11;
                case 11:
                    _b = (_c);
                    _e.label = 12;
                case 12:
                    parentRevision = _b;
                    return [4 /*yield*/, Git.getRevisionDetails(revision, config.cwd)];
                case 13:
                    _d = _e.sent(), timestamp = _d.timestamp, name = _d.name, subject = _d.subject;
                    if (config.buildUrlFormat) {
                        toPath = path_to_regexp_1.default.compile(config.buildUrlFormat);
                        revisionUrl = toPath({ revision: revision });
                        revision = {
                            value: revision,
                            url: revisionUrl
                        };
                        if (parentRevision) {
                            parentRevisionUrl = toPath({ revision: parentRevision });
                            parentRevision = {
                                value: parentRevision,
                                url: parentRevisionUrl
                            };
                        }
                    }
                    build = {
                        meta: __assign({ author: name, branch: branch,
                            parentRevision: parentRevision,
                            revision: revision,
                            subject: subject,
                            timestamp: timestamp }, (opts.meta || {})),
                        artifacts: artifacts
                    };
                    return [2 /*return*/, build];
            }
        });
    });
}
exports.default = createBuild;
//# sourceMappingURL=create-build.js.map