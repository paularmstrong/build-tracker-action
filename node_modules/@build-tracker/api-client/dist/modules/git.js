"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) 2019 Paul Armstrong
 */
var spawn_1 = __importDefault(require("./spawn"));
function isDirty(cwd) {
    if (cwd === void 0) { cwd = process.cwd(); }
    return spawn_1.default('git', ['status', '-s'], { cwd: cwd }).then(function (buffer) {
        return !/^\s*$/.test(buffer.toString());
    });
}
exports.isDirty = isDirty;
function getDefaultBranch(cwd) {
    if (cwd === void 0) { cwd = process.cwd(); }
    return spawn_1.default('git', ['remote', 'show', 'origin'], { cwd: cwd }).then(function (buffer) {
        var matches = buffer.toString().match(/HEAD branch: (\S+)/);
        return matches[1];
    });
}
exports.getDefaultBranch = getDefaultBranch;
function getBranch(cwd) {
    if (cwd === void 0) { cwd = process.cwd(); }
    return spawn_1.default('git', ['rev-parse', '--abbrev-ref', 'HEAD'], { cwd: cwd }).then(function (buffer) {
        return buffer.toString().trim();
    });
}
exports.getBranch = getBranch;
function getMergeBase(branch, cwd) {
    if (cwd === void 0) { cwd = process.cwd(); }
    return spawn_1.default('git', ['merge-base', 'HEAD', "origin/" + branch], { cwd: cwd }).then(function (buffer) {
        return buffer.toString().trim();
    });
}
exports.getMergeBase = getMergeBase;
function getParentRevision(sha, cwd) {
    if (cwd === void 0) { cwd = process.cwd(); }
    return spawn_1.default('git', ['log', '--pretty=%P', '-n', '1', sha], { cwd: cwd }).then(function (buffer) {
        return buffer
            .toString()
            .trim()
            .split(' ')[0];
    });
}
exports.getParentRevision = getParentRevision;
function getCurrentRevision(cwd) {
    if (cwd === void 0) { cwd = process.cwd(); }
    return spawn_1.default('git', ['rev-parse', 'HEAD'], { cwd: cwd }).then(function (buffer) { return buffer.toString().trim(); });
}
exports.getCurrentRevision = getCurrentRevision;
var SPLIT_POINT = 0x1f + ";" + 0x1f;
function getRevisionDetails(sha, cwd) {
    if (cwd === void 0) { cwd = process.cwd(); }
    return spawn_1.default('git', ['show', '-s', "--format=%ct" + SPLIT_POINT + "%aN" + SPLIT_POINT + "%s", sha], { cwd: cwd }).then(function (buffer) {
        var _a = buffer.toString().split("" + SPLIT_POINT), timestamp = _a[0], name = _a[1], subject = _a[2];
        return {
            timestamp: parseInt(timestamp, 10),
            name: name,
            subject: subject
        };
    });
}
exports.getRevisionDetails = getRevisionDetails;
//# sourceMappingURL=git.js.map