"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copyright (c) 2019 Paul Armstrong
 */
var ArtifactDelta_1 = __importDefault(require("./ArtifactDelta"));
var emptyObject = Object.freeze({});
var BuildDelta = /** @class */ (function () {
    function BuildDelta(baseBuild, prevBuild, options) {
        if (options === void 0) { options = {}; }
        this._baseBuild = baseBuild;
        this._prevBuild = prevBuild;
        this._artifactBudgets = options.artifactBudgets || emptyObject;
        this._artifactFilters = options.artifactFilters || [];
        this._groups = options.groups || [];
    }
    Object.defineProperty(BuildDelta.prototype, "baseBuild", {
        get: function () {
            return this._baseBuild;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildDelta.prototype, "prevBuild", {
        get: function () {
            return this._prevBuild;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildDelta.prototype, "artifactSizes", {
        get: function () {
            var _this = this;
            if (!this._sizeKeys) {
                this._sizeKeys = new Set();
                this._baseBuild.artifactSizes.forEach(function (key) {
                    _this._sizeKeys.add(key);
                });
                this._prevBuild.artifactSizes.forEach(function (key) {
                    _this._sizeKeys.add(key);
                });
                if (this._sizeKeys.size !== this._baseBuild.artifactSizes.length ||
                    this._sizeKeys.size !== this._prevBuild.artifactSizes.length) {
                    throw new Error('Size keys do not match between builds');
                }
            }
            return Array.from(this._sizeKeys);
        },
        enumerable: true,
        configurable: true
    });
    BuildDelta.prototype.getArtifactDelta = function (name) {
        if (!this._artifactDeltas) {
            this.artifactDeltas;
        }
        if (!this._artifactDeltas.has(name)) {
            // @ts-ignore
            var noSize = this.artifactSizes.reduce(function (memo, key) {
                memo[key] = 0;
                return memo;
            }, {});
            return new ArtifactDelta_1.default(name, [], noSize, noSize, false);
        }
        return this._artifactDeltas.get(name);
    };
    Object.defineProperty(BuildDelta.prototype, "artifactNames", {
        get: function () {
            var _this = this;
            if (!this._artifactNames) {
                this._artifactNames = new Set();
                var mapNames = function (name) {
                    if (!_this._artifactFilters.some(function (filter) { return filter.test(name); })) {
                        _this._artifactNames.add(name);
                    }
                };
                this._baseBuild.artifactNames.forEach(mapNames);
                this._prevBuild.artifactNames.forEach(mapNames);
            }
            return this._artifactNames;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildDelta.prototype, "_fauxArtifactSizes", {
        get: function () {
            // @ts-ignore
            return this.artifactSizes.reduce(function (memo, sizeKey) {
                memo[sizeKey] = 0;
                return memo;
            }, {});
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildDelta.prototype, "artifactDeltas", {
        get: function () {
            var _this = this;
            if (!this._artifactDeltas) {
                this._artifactDeltas = new Map();
                this.artifactNames.forEach(function (artifactName) {
                    var baseArtifact = _this._baseBuild.getArtifact(artifactName);
                    var prevArtifact = _this._prevBuild.getArtifact(artifactName);
                    var sizes = baseArtifact ? baseArtifact.sizes : _this._fauxArtifactSizes;
                    var prevSizes = prevArtifact ? prevArtifact.sizes : _this._fauxArtifactSizes;
                    var budgets = __spreadArrays((_this._artifactBudgets[artifactName] || []), (_this._artifactBudgets['*'] || []));
                    var delta = new ArtifactDelta_1.default(artifactName, budgets, sizes, prevSizes, !baseArtifact || !prevArtifact || baseArtifact.hash !== prevArtifact.hash);
                    _this._artifactDeltas.set(artifactName, delta);
                });
            }
            return Array.from(this._artifactDeltas.values());
        },
        enumerable: true,
        configurable: true
    });
    BuildDelta.prototype.getGroupDelta = function (groupName) {
        if (!this._groupDeltas) {
            this.groupDeltas;
        }
        return this._groupDeltas.get(groupName);
    };
    Object.defineProperty(BuildDelta.prototype, "groupDeltas", {
        get: function () {
            var _this = this;
            if (!this._groupDeltas) {
                this._groupDeltas = new Map();
                this._groups.forEach(function (group) {
                    var artifactNames = group.artifactNames ? __spreadArrays(group.artifactNames) : [];
                    if (group.artifactMatch) {
                        artifactNames = artifactNames.concat(Array.from(_this.artifactNames).filter(function (name) { return group.artifactMatch.test(name); }));
                    }
                    var baseSum = _this._baseBuild.getSum(artifactNames);
                    var prevSum = _this._prevBuild.getSum(artifactNames);
                    var hashChanged = artifactNames.reduce(function (changed, artifactName) {
                        var baseArtifact = _this._baseBuild.getArtifact(artifactName);
                        var prevArtifact = _this._prevBuild.getArtifact(artifactName);
                        return changed ? true : !baseArtifact || !prevArtifact || baseArtifact.hash !== prevArtifact.hash;
                    }, false);
                    var delta = new ArtifactDelta_1.default(group.name, group.budgets || [], baseSum || _this._fauxArtifactSizes, prevSum || _this._fauxArtifactSizes, hashChanged);
                    _this._groupDeltas.set(group.name, delta);
                });
            }
            return this._groupDeltas;
        },
        enumerable: true,
        configurable: true
    });
    return BuildDelta;
}());
exports.default = BuildDelta;
//# sourceMappingURL=BuildDelta.js.map